# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: question-service-deploy

on:
  push:
    branches: [ "main" ]
    paths: 
      - "question-service/**"

jobs:
  build:
    name: Question Service Docker Image to ECR
    runs-on: ubuntu-latest

    if: ${{ github.repository_owner == 'CS3219-AY2223S1' }} # only run deployment on master repo and not forks
    environment: cs3219-project-ay2223s1-g50 # needed to retrieve the secrets from GH environment

    defaults:
       run:
         working-directory: question-service
    steps:

    - name: Check out repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cs3219-project-ay2223s1-g50-question
        IMAGE_TAG: ${{ github.sha }}
        DB_QUESTIONS_CLOUD_URI: ${{ secrets.DB_QUESTIONS_CLOUD_URI }}
      run: |
        docker build --build-arg DB_QUESTIONS_CLOUD_URI=$DB_QUESTIONS_CLOUD_URI -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      with:
        task-definition: cs3219-project-ay2223s1-g50
        container-name: question-service
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: cs3219-project-ay2223s1-g50-service
        cluster: cs3219-project-ay2223s1-g50-cluster 
        wait-for-service-stability: true

    - name: Deploy success!
      run: echo Pushed to ECR and deployed to ECS 


